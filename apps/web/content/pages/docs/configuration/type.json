{
  "title": "Type",
  "body": [
    {
      "type": "heading",
      "textAlign": "left",
      "level": 1,
      "content": [
        {
          "type": "text",
          "text": "Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "A type defines fields and presentational settings. Fields hold data that can be edited in the dashboard. Top level types which are used in a "
        },
        {
          "type": "text",
          "text": "Schema",
          "marks": [
            {
              "type": "link",
              "attrs": {
                "data-id": "a75tGMS2KoV50oYz5NOYQ",
                "data-entry": "267KTV8uPHIdZgFUQvJf06sfm4h",
                "data-type": null,
                "href": null,
                "title": null
              }
            }
          ]
        },
        {
          "type": "text",
          "text": " need to define both a title and path field."
        }
      ]
    },
    {
      "id": "267QyzM4851hQU1DihfoV3fSIFg",
      "type": "CodeBlock",
      "code": "alinea.type('My type', {\n  title: alinea.text('Title', {width: 0.5}),\n  path: alinea.path('Path', {width: 0.5}),\n  [alinea.meta]: {\n    isContainer: true\n  }\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "heading",
      "level": 2,
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Configuration"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "`isContainer`",
          "marks": [
            {
              "type": "bold"
            }
          ]
        },
        {
          "type": "hardBreak"
        },
        {
          "type": "text",
          "text": "When a type is marked as a container it can contain subpages."
        }
      ]
    },
    {
      "id": "28hm0oPtHKhLaCy81WA2kyAKIO2",
      "type": "CodeBlock",
      "code": "isContainer: true",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "`contains`",
          "marks": [
            {
              "type": "bold"
            }
          ]
        },
        {
          "type": "hardBreak"
        },
        {
          "type": "text",
          "text": "In case this type is a container the allowed sub types can be declared in an array."
        }
      ]
    },
    {
      "id": "28hmFQwpEgifAOoOnxkUe2FtXDJ",
      "type": "CodeBlock",
      "code": "contains: ['PageA', 'PageB']",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "`entryUrl`",
          "marks": [
            {
              "type": "bold"
            }
          ]
        },
        {
          "type": "hardBreak"
        },
        {
          "type": "text",
          "text": "The `url` property of entries can be controlled using the `entryUrl` function in the type options. Urls are computed during generation and this can help to keep them constant if you're using a web framework that does file system routing. The available parameters are `path`, `parentPaths` and `locale`. For example: making sure a doc page always has an url in the form of `/doc/$path` you can specify `entryUrl` as the following:"
        }
      ]
    },
    {
      "id": "aJxUeLtZdqDwmNG2_fSLq",
      "type": "CodeBlock",
      "code": "entryUrl({path}) {\n  return `/doc/${path}`\n}",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "`icon`",
          "marks": [
            {
              "type": "bold"
            }
          ]
        },
        {
          "type": "hardBreak"
        },
        {
          "type": "text",
          "text": "An icon can be used to label a type in the sidebar entry tree. Icons are implemented as a React component. You can find icons on "
        },
        {
          "type": "text",
          "text": "Icones",
          "marks": [
            {
              "type": "link",
              "attrs": {
                "data-id": "qvoK8kMv_e7gV6hhapAn5",
                "data-entry": null,
                "data-type": null,
                "href": "https://icones.js.org",
                "target": "_blank",
                "title": null
              }
            }
          ]
        },
        {
          "type": "text",
          "text": " or install a package such as "
        },
        {
          "type": "text",
          "text": "react-icons",
          "marks": [
            {
              "type": "link",
              "attrs": {
                "data-id": "toXRTK13MpBaa1ijN3COj",
                "data-entry": null,
                "data-type": null,
                "href": "https://react-icons.github.io/react-icons",
                "target": "_blank",
                "title": null
              }
            }
          ]
        },
        {
          "type": "text",
          "text": "."
        }
      ]
    }
  ],
  "metadata": {
    "title": "",
    "description": "",
    "openGraph": {
      "title": "",
      "image": {},
      "description": ""
    }
  },
  "@alinea": {
    "entryId": "267QuOShP41WnFxQFOcHZQoCsla",
    "type": "Doc",
    "index": "Zx"
  }
}