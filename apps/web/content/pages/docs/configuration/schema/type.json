{
  "_id": "267QuOShP41WnFxQFOcHZQoCsla",
  "_type": "Doc",
  "_index": "Zx",
  "_i18nId": "267QuOShP41WnFxQFOcHZQoCsla",
  "title": "Type",
  "navigationTitle": "",
  "body": [
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "A type defines fields and presentational settings. Fields hold data that can be edited in the dashboard. Top level types which are used in a "
        },
        {
          "_type": "text",
          "text": "Schema",
          "marks": [
            {
              "_type": "link",
              "_id": "a75tGMS2KoV50oYz5NOYQ",
              "_entry": "267KTV8uPHIdZgFUQvJf06sfm4h"
            }
          ]
        },
        {
          "_type": "text",
          "text": " need to define both a title and path field."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "267QyzM4851hQU1DihfoV3fSIFg",
      "code": "import {Config} from 'alinea'\n\nConfig.type('Blog', {\n  contains: ['BlogPost'],\n  fields: {\n    title: alinea.text('Title', {width: 0.5}),\n    path: alinea.path('Path', {width: 0.5})\n  }\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 2,
      "content": [
        {
          "_type": "text",
          "text": "Configuration"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Types should be defined within a "
        },
        {
          "_type": "text",
          "text": "Schema",
          "marks": [
            {
              "_type": "link",
              "_id": "2aAy9jQj9cK5OR1RlFElYWSddy2",
              "_entry": "267KTV8uPHIdZgFUQvJf06sfm4h",
              "_link": "entry",
              "title": ""
            }
          ]
        },
        {
          "_type": "text",
          "text": "."
        }
      ]
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "`contains`"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Accept entries of these Types as children. For example a `Blog` can accept `BlogEntry` children."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "28hmFQwpEgifAOoOnxkUe2FtXDJ",
      "code": "contains: ['BlogEntry']",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "`entryUrl`"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "The `url` property of entries can be controlled using the `entryUrl` function in the type options. Urls are computed during generation and this can help to keep them constant if you're using a web framework that does file system routing. The available parameters are `path`, `parentPaths` and `locale`. For example: making sure a doc page always has an url in the form of `/doc/$path` you can specify `entryUrl` as the following:"
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "aJxUeLtZdqDwmNG2_fSLq",
      "code": "entryUrl({path}) {\n  return `/doc/${path}`\n}",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "`icon`"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "An icon can be used to label a type in the sidebar entry tree. Icons are implemented as a React component. You can find icons on "
        },
        {
          "_type": "text",
          "text": "Icones",
          "marks": [
            {
              "_type": "link",
              "_id": "qvoK8kMv_e7gV6hhapAn5",
              "href": "https://icones.js.org",
              "target": "_blank"
            }
          ]
        },
        {
          "_type": "text",
          "text": " or install a package such as "
        },
        {
          "_type": "text",
          "text": "react-icons",
          "marks": [
            {
              "_type": "link",
              "_id": "toXRTK13MpBaa1ijN3COj",
              "href": "https://react-icons.github.io/react-icons",
              "target": "_blank"
            }
          ]
        },
        {
          "_type": "text",
          "text": "."
        }
      ]
    },
    {
      "_type": "heading",
      "level": 2,
      "content": [
        {
          "_type": "text",
          "text": "Good to know"
        }
      ]
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "Fields must be unique"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Alinea will throw an error if a field shows up multiple times in the same `Type`. Having unique fields is important so we can use the field references directly when "
        },
        {
          "_type": "text",
          "text": "querying data",
          "marks": [
            {
              "_type": "link",
              "_id": "2bMDWBN5BaC5E3OxgHCQZFHUp47",
              "_entry": "28hxVNf3JO9raYJ1HVQ6XgDX9pW",
              "_link": "entry"
            }
          ]
        },
        {
          "_type": "text",
          "text": " or in "
        },
        {
          "_type": "text",
          "text": "conditional configuration",
          "marks": [
            {
              "_type": "link",
              "_id": "2bMDXpF1usIvfF9iDpLslLCmPSu",
              "_entry": "24yE2mu6Xq959jrP135Sdb4e3lG",
              "_link": "entry"
            }
          ]
        },
        {
          "_type": "text",
          "text": ". "
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "2bMDZDXD2d1Am2Gq94E4xZREnPG",
      "code": "import {Config, Field} from 'alinea'\n\nconst textField = Field.text('Text field')\nconst MyType = Config.type('My type', {\n  fields: {\n    fieldA: textField,\n    fieldB: textField // This is not allowed\n  }\n})\n\n// You can rewrite the above to get unique \n// references by making textField a function\nconst textField = () => Field.text('Text field')\nconst MyType = Config.type('My type', {\n  fields: {\n    fieldA: textField(),\n    fieldB: textField() // This is fine\n  }\n})",
      "fileName": "",
      "language": ""
    }
  ],
  "metadata": {
    "title": "",
    "description": "",
    "openGraph": {
      "title": "",
      "image": {},
      "description": ""
    }
  }
}