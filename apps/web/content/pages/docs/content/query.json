{
  "title": "Querying content",
  "navigationTitle": "",
  "body": [
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "The CMS instance that is exported in your config file can be used to query the stored data."
        }
      ]
    },
    {
      "id": "2YlCk9I5mZXiCO3tbjj941PI9rc",
      "type": "FrameworkBlock",
      "next": [
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Content can be queried within React server components (and functions that run on the server such as generateStaticParams)."
            }
          ]
        },
        {
          "id": "2YlCpSWtMLknsvHhIwtZlTf1MDI",
          "type": "CodeBlock",
          "code": "import {cms} from '@/cms'\nimport {Query} from 'alinea'\n\nexport default async function HomePage() {\n  const homePage = await cms.get(Query(HomePage))\n  return <h1>{homePage.title}</h1>\n}",
          "fileName": "",
          "language": "",
          "compact": false
        }
      ],
      "js": [
        {
          "id": "2YlCoQfFsitNdnsCxRgq0VkVdEU",
          "type": "CodeBlock",
          "code": "import {cms} from '@/cms'\n\nconst homePage = await cms.get(HomePage())",
          "fileName": "",
          "language": "",
          "compact": false
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Retrieving a page"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "A single page can be fetched using the `get` method. Criteria can be passed to filter entries."
        }
      ]
    },
    {
      "id": "28hy8mAMZJiFhtaajix2fKGBKBE",
      "type": "CodeBlock",
      "code": "import {Query} from 'alinea'\n\n// Fetch the first page where field equals the string 'value'\nconst page = await cms.get(\n  Query(Page).where({field: 'value'})\n)",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "heading",
      "level": 2,
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Retrieving multiple pages"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Multiple pages can be fetched using the `find` method."
        }
      ]
    },
    {
      "id": "28hyQUttn286uRfAArTKdMWNJVb",
      "type": "CodeBlock",
      "code": "import {Query} from 'alinea'\n\n// Fetch all pages where field equals the string 'value'\nconst pages = await cms.find(\n  Query(Page).where({field: 'value'})\n)",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "heading",
      "level": 3,
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Limiting results"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "A result set can be limited using `skip` and `take`."
        }
      ]
    },
    {
      "id": "28hyZtRcyC7fXKRHUiqhjA5O7iA",
      "type": "CodeBlock",
      "code": "// Skip the first 10 pages and return a maximum of 10\nconst limited = await cms.find(\n  Query(Page).skip(10).take(10)\n)",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "heading",
      "textAlign": "left",
      "level": 3,
      "content": [
        {
          "type": "text",
          "text": "Full text search"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Pages can be queried with search terms. Any (rich) text field with the `searchable` option set to `true` is indexed."
        }
      ]
    },
    {
      "id": "2b05iLFLHZ4Vxcyao5sTiFKsFOi",
      "type": "CodeBlock",
      "code": "import {Query} from 'alinea'\n\nconst results = await cms.find(\n  Query(Page).search('query', 'content')\n)",
      "fileName": "",
      "language": ""
    },
    {
      "type": "heading",
      "textAlign": "left",
      "level": 3,
      "content": [
        {
          "type": "text",
          "text": "Querying specific pages"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "To filter pages on specific fields first narrow the search to a type, then use the `where` method to specify conditions."
        }
      ]
    },
    {
      "id": "IEmT75lZgxznL9v7Zq9mW",
      "type": "CodeBlock",
      "code": "import {Query} from 'alinea'\n\nconst old = await cms.find(\n  Query(Animal).where(Animal.age.isGreater(10))\n)\nconst teenager = await cms.find(Query(Human).where(\n  Query.or(\n    Human.age.isGreater(10),\n    Human.age.isLess(20)\n  )\n)\nconst applesOrOranges = await cms.find(\n  Query(Fruit).where(\n    Fruit.title.isIn(['apple', 'orange'])\n  )\n)",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Conditions can be created by accessing the fields of the table instances and using the conditional operators:"
        }
      ]
    },
    {
      "id": "2aiMtwZlHXcQkToqIEv04u3V6VY",
      "type": "CodeBlock",
      "code": "BlogPost.title // This is an Expr<string> which has an `is` method to compare\nBlogPost.title.is(\"Test\") // Compare with a value, results in an Expr<boolean>",
      "fileName": "",
      "language": ""
    },
    {
      "type": "heading",
      "level": 2,
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Ordering results"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "A result set can be ordered by passing one or multiple fields."
        }
      ]
    },
    {
      "id": "28hzjFJi5kuByP0j3ZX79ATIyyS",
      "type": "CodeBlock",
      "code": "import {Query} from 'alinea'\n\nconst ordered = await cms.find(\n  Query(NewsItem).orderBy(NewsItem.publishDate.desc())\n)",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "heading",
      "level": 2,
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Group by"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Results can be grouped by one or more fields."
        }
      ]
    },
    {
      "id": "28i0B7nRFUqmGWdCmchhzy21bkt",
      "type": "CodeBlock",
      "code": "import {Query} from 'alinea'\n\nconst grouped = await cms.find(\n  Query(NewsItem).groupBy(NewsItem.category)\n)",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "type": "heading",
      "level": 2,
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Selecting specific fields"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Resulting rows can be narrowed to contain only specific fields."
        }
      ]
    },
    {
      "id": "28hywuwvVMmRT7zhyZEumjM19tI",
      "type": "CodeBlock",
      "code": "import {Query} from 'alinea'\n\n// Return only titles\nconst rows = await cms.find(\n  Query(Page).select({title: Page.title})\n)",
      "fileName": "",
      "language": "",
      "compact": false
    }
  ],
  "metadata": {
    "title": "",
    "description": "",
    "openGraph": {
      "title": "",
      "image": {},
      "description": ""
    }
  },
  "@alinea": {
    "entryId": "28hxVNf3JO9raYJ1HVQ6XgDX9pW",
    "type": "Doc",
    "index": "a1"
  }
}