{
  "title": "Editing content",
  "navigationTitle": "",
  "body": [
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Your CMS instance has methods to create and update content. During development these will update the file system directly, while in production the changes will result in a new git commit."
        }
      ]
    },
    {
      "id": "2bx32QbAHT1Ib8MCrogypD3TOvL",
      "type": "CodeBlock",
      "code": "// These are defined in cms.tsx and \n// will be used in the examples below\nconst BlogPost = alinea.type(...)\nconst schema = {BlogPost}\nconst cms = createCMS({schema, ...})",
      "fileName": "",
      "language": ""
    },
    {
      "type": "heading",
      "textAlign": "left",
      "level": 2,
      "content": [
        {
          "type": "text",
          "text": "Creating content"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "New entries can be created using the `create` function."
        }
      ]
    },
    {
      "id": "2bww0XuSHzm0f72kxNM5cQlVLvI",
      "type": "CodeBlock",
      "code": "import {Edit} from 'alinea'\n\n// Start a transaction to create a new entry of type BlogPost\nconst post = Edit.create(BlogPost).set({\n  title: 'A new blog post',\n  body: 'Hello world'\n})\n\n// The new entry ID can be read before comitting\nconsole.log(`Creating post with id: ${post.id}`)\n\n// Save the changes\nawait cms.commit(post)",
      "fileName": "",
      "language": ""
    },
    {
      "type": "heading",
      "textAlign": "left",
      "level": 2,
      "content": [
        {
          "type": "text",
          "text": "Update content"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Entry fields can be edited using the `edit` function. Optionally pass the entry Type as a second argument so the field values are typed correctly."
        }
      ]
    },
    {
      "id": "2bx3AJ8D93WgmthX8tiEqZura9X",
      "type": "CodeBlock",
      "code": "import {Edit, Query} from 'alinea'\n\n// Select the first blog post\nconst blogPostId = await cms.get(Query(BlogPost).select(Query.id))\n\n// Edit a field and save\nconst update = Edit(blogPostId, BlogPost).set({\n  body: 'New body text'\n})\n\nawait cms.commit(update)",
      "fileName": "",
      "language": ""
    },
    {
      "type": "heading",
      "textAlign": "left",
      "level": 2,
      "content": [
        {
          "type": "text",
          "text": "File uploads"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Files can be uploaded using the upload function."
        }
      ]
    },
    {
      "id": "2bx3SNjDfXQsRSkJYEUX5GY3qg9",
      "type": "CodeBlock",
      "code": "import {Edit} from 'alinea'\n\nconst file = new File(['content'], 'test.txt')\nconst upload = Edit.upload(file)\n\n// The new entry ID can be read before comitting\nconsole.log(`Creating post with id: ${upload.id}`)\n\n// Upload file and save file metadata\nawait cms.commit(upload)",
      "fileName": "",
      "language": ""
    },
    {
      "type": "heading",
      "textAlign": "left",
      "level": 3,
      "content": [
        {
          "type": "text",
          "text": "Creating image previews"
        }
      ]
    },
    {
      "type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "type": "text",
          "text": "Alinea can create all the metadata for images (such as previews) by passing a `createPreview` function. On the server this will use the `sharp` package to read image data. The package will need to be installed separately."
        }
      ]
    },
    {
      "id": "2bxKAtZiQcruhSmRPO9PldQZ3mR",
      "type": "CodeBlock",
      "code": "import {Edit} from 'alinea'\nimport {createPreview} from 'alinea/core/media/CreatePreview'\nimport fs from 'node:fs'\n\nconst file = new File([\n  fs.readFileSync('./test.png')\n], 'test.png')\nconst upload = Edit.upload(file, {createPreview})\nawait cms.commit(upload)",
      "fileName": "",
      "language": ""
    }
  ],
  "metadata": {
    "title": "",
    "description": "",
    "openGraph": {
      "title": "",
      "image": {},
      "description": ""
    }
  },
  "@alinea": {
    "entryId": "2bwoBrTOuERj2E8r7yuNglC0H6G",
    "type": "Doc",
    "index": "a1G"
  }
}