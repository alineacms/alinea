{
  "_id": "28hxVNf3JO9raYJ1HVQ6XgDX9pW",
  "_type": "Doc",
  "_index": "a1",
  "title": "Querying content",
  "navigationTitle": "",
  "body": [
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Once content has been saved in the CMS you'll want a way to retrieve it. Your CMS instance has methods to fetch specific Entries or search through all content."
        }
      ]
    },
    {
      "_type": "FrameworkBlock",
      "_id": "2YlCk9I5mZXiCO3tbjj941PI9rc",
      "next": [
        {
          "_type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "_type": "text",
              "text": "Content can be queried within React server components (and functions that run on the server such as generateStaticParams)."
            }
          ]
        },
        {
          "_type": "CodeBlock",
          "_id": "2YlCpSWtMLknsvHhIwtZlTf1MDI",
          "code": "import {cms} from '@/cms'\n\nexport default async function HomePage() {\n  const homePage = await cms.get({type: HomePage})\n  return <h1>{homePage.title}</h1>\n}",
          "fileName": "",
          "language": "",
          "compact": false
        }
      ]
    },
    {
      "_type": "heading",
      "level": 2,
      "content": [
        {
          "_type": "text",
          "text": "Getting a specific Entry"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "A single Entry can be fetched using the `get` method."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "28hy8mAMZJiFhtaajix2fKGBKBE",
      "code": "const entry = await cms.get({\n  type: HomePage,\n  id: homePageId\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 2,
      "content": [
        {
          "_type": "text",
          "text": "Querying multiple Entries"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Multiple Entries can be fetched using the `find` method."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "28hyQUttn286uRfAArTKdMWNJVb",
      "code": "const blogPosts = await cms.find({\n  type: BlogPost,\n  parentId: blogId\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "Limiting results"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "A result set can be limited using `skip` and `take`."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "28hyZtRcyC7fXKRHUiqhjA5O7iA",
      "code": "// Skip the first 10 entries and return a maximum of 10\nconst posts = await cms.find({\n  type: BlogPost,\n  skip: 10,\n  take: 10\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "Order results"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "A result set can be ordered by passing one or multiple fields. "
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "28hzjFJi5kuByP0j3ZX79ATIyyS",
      "code": "const ordered = await cms.find({\n  type: NewsItem,\n  orderBy: {desc: NewsItem.publishDate}\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "Group by"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Results can be grouped by one or more fields."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "28i0B7nRFUqmGWdCmchhzy21bkt",
      "code": "const grouped = await cms.find({\n  type: NewsItem,\n  groupBy: NewsItem.category\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "Filtering by Field values"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "To search Entries by specific Fields use the `filter` option."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "IEmT75lZgxznL9v7Zq9mW",
      "code": "// If filtered by Type first it's possible to match fields\n// on equality directly by passing an object. This does not\n// work for any other comparison operator.\nconst withPath = await cms.get({\n  type: BlogPost,\n  filter: {path: 'why-you-should-get-a-cat'}\n})\n\n// Comparisons can be made by using the conditional methods\n// of the field you're comparing to.\nconst recent = await cms.find({\n  type: BlogPost,\n  filter: {publishedDate: {gte: `2024-01-01`}}\n})\n\n// Multiple conditions result in matching on both (AND).\nconst postsOf2023 = await cms.find({\n  type: BlogPost,\n  filter: {\n    publishedDate: {\n      lt: '2024-01-01',\n      gte: '2023-01-01'\n    }\n  }\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "Full text search"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Entries can be queried with search terms. Any (Rich) Text Field with the `searchable` option set to `true` is indexed."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "2b05iLFLHZ4Vxcyao5sTiFKsFOi",
      "code": "// Search can be used in combination with conditions\nconst containsDogs = await cms.find({\n  type: BlogPost,\n  search: 'dog'\n})\n\n// Multiple search terms can be used\nconst containsBothDogsAndCats = await cms.find({\n  type: BlogPost,\n  search: ['dog', 'cat']\n})",
      "fileName": "",
      "language": ""
    },
    {
      "_type": "heading",
      "level": 2,
      "content": [
        {
          "_type": "text",
          "text": "Selecting Fields"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Resulting rows can be narrowed to contain only specific fields."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "28hywuwvVMmRT7zhyZEumjM19tI",
      "code": "import {Query} from 'alinea'\n\n// Returns a select set of fields \nconst rows = await cms.find({\n  type: BlogPost,\n  select: {\n    // Entry fields are available on Query\n    id: Query.id,\n    url: Query.url,\n    title: BlogPost.title,\n    description: BlogPost.shortDescription\n  }\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "Selecting data from related Entries"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Entries in Alinea are part of a content tree. This means they'll often have a parent Entry or contain children Entries. To query content from the parent(s) or children you can request it within the selection."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "2c2xXRab38WZmsa3GLCLx5Z6LGA",
      "code": "import {Query} from 'alinea'\n\n// Select a few fields from the parent Entries to render\n// a breadcrumb navigation.\nconst breadcrumbs = Query.parents({\n  select: {\n    url: Query.url,\n    title: Query.title\n  }\n})\n\n// Use it directly in another select\nconst blogPosts = await cms.find({\n  type: BlogPost,\n  select: {\n    // Select the fields you want from this blog post\n    title: BlogPost.title,\n    body: BlogPost.body,\n    // ... and include the data of the parents\n    breadcrumbs\n  }\n})\n\n// You can use the spread operator to make the above more readable\nconst blogPosts = await cms.find({\n  type: BlogPost,\n  select: {\n    ...BlogPost,\n    breadcrumbs\n  }\n})\n\n// Similarly you can fetch parent and children in one query\nconst blog = await cms.get({\n  type: Blog,\n  select: {\n    ...Blog,\n    posts: Query.children({type: blogPost})\n  }\n})",
      "fileName": "",
      "language": ""
    }
  ],
  "metadata": {
    "title": "",
    "description": "",
    "openGraph": {
      "siteName": "",
      "image": {},
      "title": "",
      "description": ""
    }
  }
}