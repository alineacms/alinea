{
  "_id": "268hjH2OU9fiReg61Wov1SRbPD5",
  "_type": "Doc",
  "_index": "a1",
  "title": "Rich Text",
  "navigationTitle": "",
  "body": [
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Rich text can contain text marks like bold, italics or underline. Content can be structured using headings. It can even contain other types as blocks that can be moved around freely."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "268iODr7pOAG2BeDXXfDEvDZYfr",
      "code": "import {Field} from 'alinea'\n\nField.richText('My rich text field', {\n  schema: {\n    CodeBlock,\n    ImageBlock\n  }\n})",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "ExampleBlock",
      "_id": "EuUkPtwTcHiQweiT_zZZI",
      "code": "import {Config, Field} from 'alinea'\n\nexport default Config.type('Rich Text field', {\n  fields: {\n    richText: Field.richText('My rich text field', {\n      initialValue: [\n        {_type: 'heading', level: 1, content: [\n          {_type: 'text', text: \"Hello world\"}\n        ]},\n        {_type: 'paragraph', content: [\n          {_type: 'text', text: \"A paragraph follows\"}\n        ]}   \n      ]\n    })\n  }\n})\n "
    },
    {
      "_type": "heading",
      "level": 2,
      "content": [
        {
          "_type": "text",
          "text": "Configuration"
        }
      ]
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "`schema`"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Allow Types of this Schema to be created between text fragments."
        }
      ]
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "`searchable`"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Index the content of this field so it can be found in a search query."
        }
      ]
    },
    {
      "_type": "heading",
      "level": 3,
      "content": [
        {
          "_type": "text",
          "text": "`enableTables`"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Allow tables to be inserted in this field."
        }
      ]
    },
    {
      "_type": "heading",
      "level": 2,
      "content": [
        {
          "_type": "text",
          "text": "Rendering rich text"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Rich text values are encoded in an array."
        }
      ]
    },
    {
      "_type": "CodeVariantsBlock",
      "_id": "Lnc0CiaceUAYiYzl6sfwE",
      "variants": [
        {
          "_id": "pZZfVGHe4bIZGFtii-8zR",
          "_index": "a0",
          "_type": "Variant",
          "name": "JSON",
          "language": "tsx",
          "code": "[\n  {\n    \"_type\": \"heading\",\n    \"level\": 1,\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Hello world\"\n      }\n    ]\n  },\n  {\n    \"_type\": \"paragraph\",\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"A paragraph follows\"\n      }\n    ]\n  }\n]"
        },
        {
          "_id": "jKrgWIwJaQMb-XL58ZPcv",
          "_index": "a1",
          "_type": "Variant",
          "name": "Types",
          "language": "tsx",
          "code": "type TextDoc = Array<TextNode>\n\ntype TextNode = \n  | {\n    _type: 'text'\n    text?: string\n    marks?: Array<{\n      type: string\n      attrs?: Record<string, string>\n    }>\n  }\n  | {\n    _type: string\n    content?: TextDoc\n    [key: string]: any\n  }"
        }
      ]
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "Alinea provides a React component to render this array in your app. By default it will use plain tags such as h1, h2, p, ul, li, etc. to represent the text. Any of these can be customized by either passing a React component or a vnode, of which we'll copy the type and props."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "hOgtsNKgH3pWurn4Mb-td",
      "code": "import {RichText} from 'alinea/ui'\n\n<RichText\n  doc={richTextValue}\n\n  // Everything below is optional\n\n  // Render plain text with a custom component\n  text={TextComponent}\n\n  // Attach a custom classname to paragraphs\n  p={<p className=\"my-p\" />}\n\n  // Use a custom component for h1 headings\n  h1={MyH1Heading}\n  \n  // Use a custom component for links\n  a={LinkComponent}\n\n  // Attach classes to list items\n  ul={<ul className=\"my-list\" />}\n  ol={<ol className=\"my-ordered-list\" />}\n  li={<li className=\"my-list-item\" />}\n\n  // More options\n  // b={<b />}\n  // i={<i />}\n  // u={<u />}\n  // hr={<hr />}\n  // br={<br />}\n  // small={<small />}\n  // blockquote={<blockquote />}\n/>",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "paragraph",
      "textAlign": "left",
      "content": [
        {
          "_type": "text",
          "text": "The same principle is applied for custom blocks."
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "aQam3FUTLfN1uYyFFSiZk",
      "code": "import {RichText} from 'alinea/ui'\nimport {MyBlock} from './MyBlock'\nimport {MyBlockSchema} from './MyBlock.schema'\n\nconst MyBlockSchema = alinea.type('Custom block', {\n  property: alinea.text('Property')\n})\n\nfunction MyBlock({property}) {\n  return <span>{property}</span>\n}\n\n// Add to config\nalinea.richText('My rich text field', {\n  schema: alinea.schema({\n    MyBlock: MyBlockSchema\n  })\n})\n\n// Render in page views\n<RichText\n  doc={richTextValue}\n\n  // Render instances of my custom block with the MyBlock view\n  MyBlock={MyBlock}\n/>",
      "fileName": "",
      "language": "",
      "compact": false
    },
    {
      "_type": "paragraph",
      "content": [
        {
          "_type": "text",
          "text": "If you need the HTML as string output and not as a component, you can convert the component as follows:"
        }
      ]
    },
    {
      "_type": "CodeBlock",
      "_id": "2zuFDW5eMhiuJJp7E4koNWCXyJt",
      "code": "import {RichText} from 'alinea/ui'\nconst {renderToString} = await import('react-dom/server')\n\nconst html = renderToString(<RichText doc={richTextValue} />)",
      "fileName": "",
      "language": "typescript",
      "compact": false
    },
    {
      "_type": "paragraph",
      "content": [
        {
          "_type": "text",
          "text": "Note the dynamic import of react-dom/server. This is necessary to avoid warnings from Next.js for using server imports."
        }
      ]
    }
  ],
  "metadata": {
    "title": "Rich Text field - Alinea CMS",
    "description": "",
    "openGraph": {
      "siteName": "",
      "image": {},
      "title": "",
      "description": ""
    }
  }
}