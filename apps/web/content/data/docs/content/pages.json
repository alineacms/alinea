{
  "id": "28hxVNf3JO9raYJ1HVQ6XgDX9pW",
  "type": "Doc",
  "root": "data",
  "index": "a1",
  "title": "Pages",
  "blocks": [
    {
      "id": "28hxdvUqGndCClRgqppvMox36da",
      "index": "a0",
      "type": "TextBlock",
      "text": [
        {
          "type": "heading",
          "level": 1,
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Pages"
            }
          ]
        },
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "A pages instance is used to query the data stored in the CMS."
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Retrieving a page"
            }
          ]
        },
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "A single page can be fetched using the `findFirst` method. Criteria can be passed to filter entries."
            }
          ]
        },
        {
          "id": "28hy8mAMZJiFhtaajix2fKGBKBE",
          "type": "CodeBlock",
          "code": "// Fetch the first page where field equals the string 'value'\nconst page: AnyPage | undefined = await pages\n  .findFirst(page => page.field.is('value'))"
        },
        {
          "type": "heading",
          "level": 2,
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Retrieving multiple pages"
            }
          ]
        },
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Multiple pages can be fetched using the `findMany` method."
            }
          ]
        },
        {
          "id": "28hyQUttn286uRfAArTKdMWNJVb",
          "type": "CodeBlock",
          "code": "// Fetch all pages where field equals the string 'value'\nconst pages: Array<AnyPage> = await pages\n  .findMany(page => page.field.is('value'))"
        },
        {
          "type": "heading",
          "level": 3,
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Limiting results"
            }
          ]
        },
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "A result set can be limited using `skip` and `take`."
            }
          ]
        },
        {
          "id": "28hyZtRcyC7fXKRHUiqhjA5O7iA",
          "type": "CodeBlock",
          "code": "// Skip the first 10 pages and return a maximum of 10\nconst limited = await pages\n  .all()\n  .skip(10)\n  .take(10)"
        },
        {
          "type": "heading",
          "level": 3,
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Ordering results"
            }
          ]
        },
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "A result set can be ordered by passing one or multiple fields."
            }
          ]
        },
        {
          "id": "28hzjFJi5kuByP0j3ZX79ATIyyS",
          "type": "CodeBlock",
          "code": "import {Type} from '@alinea/content/myworkspace'\nconst ordered = await pages\n  .all()\n  .orderBy(Type.foo.asc(), Type.bar.desc())"
        },
        {
          "type": "heading",
          "level": 2,
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Group by"
            }
          ]
        },
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Results can be grouped by one or more fields."
            }
          ]
        },
        {
          "id": "28i0B7nRFUqmGWdCmchhzy21bkt",
          "type": "CodeBlock",
          "code": "import {Type} from '@alinea/content/myworkspace'\nconst grouped = await pages\n  .all()\n  .groupBy(Type.foo, Type.bar)"
        },
        {
          "type": "heading",
          "level": 2,
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Selecting specific fields"
            }
          ]
        },
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Resulting rows can be narrowed to contain only specific fields."
            }
          ]
        },
        {
          "id": "28hywuwvVMmRT7zhyZEumjM19tI",
          "type": "CodeBlock",
          "code": "// Return only titles\nconst rows = await pages\n  .all()\n  .select(page => ({\n    title: page.title\n  })"
        },
        {
          "type": "heading",
          "level": 2,
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "Processing fields"
            }
          ]
        },
        {
          "type": "paragraph",
          "textAlign": "left",
          "content": [
            {
              "type": "text",
              "text": "It's possible to process field values by passing a function, which can be `async`."
            }
          ]
        },
        {
          "id": "28hzx0owdbqFdAaJg0H31HP9OpI",
          "type": "CodeBlock",
          "code": "const row = await pages\n  .findFirst()\n  .select(page => ({\n    title: \n      page.title.process(title => `process title ${title}`)\n  })"
        }
      ]
    }
  ]
}