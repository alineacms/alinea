import fs from 'fs-extra'
import path from 'node:path'
import {writeFileIfContentsDiffer} from '../util/FS.js'
import {GenerateContext} from './GenerateContext.js'

function configType(location: string) {
  const file = location.endsWith('.tsx') ? location.slice(0, -4) : location
  return `export * from ${JSON.stringify(file)}`
}

const packageJson = {
  private: true,
  version: '0.0.0',
  name: '@alinea/content',
  type: 'module',
  sideEffects: false,
  types: './index.d.ts',
  exports: {
    '.': './index.js',
    './config': './config.js',
    './pages': {
      require: './pages.cjs',
      default: './pages.js'
    },
    './store': {
      require: './store.cjs',
      default: './store.js'
    },
    './backend': {
      require: './backend.cjs',
      default: './backend.js'
    },
    './.server/*': {
      worker: './.server/dist/*',
      browser: './.server/client.cjs',
      default: './.server/dist/*'
    },
    './*': './*'
  }
}

export async function copyStaticFiles({
  configLocation,
  staticDir,
  outDir
}: GenerateContext) {
  await fs.mkdirp(outDir).catch(console.log)
  function copy(...files: Array<string>) {
    return Promise.all(
      files.map(file =>
        fs.copyFile(path.join(staticDir, file), path.join(outDir, file))
      )
    )
  }
  fs.writeJSONSync(path.join(outDir, 'package.json'), packageJson, {spaces: 2})
  await copy(
    'index.js',
    'index.d.ts',
    'backend.cjs',
    'backend.js',
    'backend.d.ts',
    'store.cjs',
    'store.d.ts',
    'pages.d.ts',
    'pages.js',
    'pages.cjs',
    'schema.js'
  )

  if (!fs.existsSync(path.join(outDir, 'drafts.js'))) await copy('drafts.js')

  /*await writeFileIfContentsDiffer(
    path.join(outDir, 'config.d.ts'),
    configType(path.resolve(configLocation))
  )*/

  await writeFileIfContentsDiffer(path.join(outDir, '.gitignore'), `*\n!.keep`)
  await writeFileIfContentsDiffer(
    path.join(outDir, '.keep'),
    '# Contents of this folder are autogenerated by alinea'
  )
}
